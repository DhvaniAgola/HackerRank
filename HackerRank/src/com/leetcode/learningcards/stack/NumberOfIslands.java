package com.leetcode.learningcards.stack;

import java.util.ArrayList;
import java.util.List;

public class NumberOfIslands {

	static char[][] grid = {
		{'0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '1', '0', '1'},
		{'1', '0', '1', '0', '0', '1', '1', '0', '0', '1', '0', '1', '0', '1', '0', '1', '1', '0', '0', '0'},
		{'0', '1', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0', '1', '1', '1', '1', '0', '1'},
		{'1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '1', '1', '0'},
		{'0', '1', '0', '1', '1', '0', '1', '0', '0', '0', '1', '0', '0', '1', '0', '0', '0', '0', '0', '1'},
		{'1', '0', '0', '1', '0', '1', '0', '0', '0', '1', '1', '0', '1', '0', '0', '1', '0', '0', '0', '0'},
		{'1', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '1', '0', '0', '1', '0', '0', '0', '0', '1'},
		{'1', '0', '0', '0', '1', '0', '1', '1', '1', '0', '1', '0', '1', '1', '1', '1', '0', '0', '0', '1'},
		{'1', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '1'},
		{'0', '0', '0', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '0', '0', '0', '1', '0'},
		{'1', '0', '1', '0', '1', '0', '0', '1', '1', '1', '0', '1', '1', '0', '0', '1', '1', '0', '0', '0'},
		{'0', '1', '0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '1', '0'},
		{'1', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '1', '0', '1', '0', '1', '0', '0', '1'},
		{'0', '0', '0', '0', '1', '0', '1', '1', '0', '1', '0', '1', '0', '1', '1', '1', '1', '0', '0', '0'},
		{'0', '1', '1', '0', '0', '0', '0', '1', '0', '0', '1', '1', '1', '0', '0', '1', '1', '0', '1', '0'},
		{'1', '0', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '0', '0', '1', '0', '0', '0', '1'},
		{'1', '0', '0', '0', '1', '0', '1', '0', '0', '1', '0', '1', '0', '0', '1', '0', '0', '1', '1', '1'},
		{'0', '0', '1', '0', '0', '0', '0', '1', '0', '0', '1', '1', '0', '1', '1', '1', '0', '0', '0', '0'},
		{'0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '1', '0', '1', '0', '1', '0', '0', '0', '1', '1'},
		{'1', '0', '0', '0', '1', '0', '1', '1', '1', '0', '0', '1', '0', '1', '0', '1', '1', '0', '0', '0'}};

	public static void main(String[] args) {

		int rows = grid.length;
		int cols = grid[0].length;

		List<Integer> notVisited = new ArrayList<>();
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				if (grid[i][j] == '1')
					notVisited.add(i * cols + j + 1);
			}

		}

		int island = 0;

		while (!notVisited.isEmpty()) {
			island++;
			DFS(notVisited.get(0), notVisited, rows, cols);
		}
		System.out.println(island);

		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				System.out.print(grid[i][j] + ", ");
			}
			System.out.println();
		}
	}

	static void DFS(int node, List<Integer> notVisited, int rows, int cols) {
		int i = (node - 1) / cols;
		int j = ((node - 1) % cols);

		grid[i][j] = 'X';
		notVisited.remove(Integer.valueOf(node));
		if (j < cols - 1 && notVisited.contains(node + 1)) {
			DFS(node + 1, notVisited, rows, cols);
		}

		if (i < rows - 1 && notVisited.contains(node + cols)) {
			DFS(node + cols, notVisited, rows, cols);
		}

		if (j > 0 && notVisited.contains(node - 1)) {
			DFS(node - 1, notVisited, rows, cols);
		}

		if (i > 0 && notVisited.contains(node - cols)) {
			DFS(node - cols, notVisited, rows, cols);
		}

	}
}
